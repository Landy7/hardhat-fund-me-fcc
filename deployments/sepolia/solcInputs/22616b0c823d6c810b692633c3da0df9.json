{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "//allows people actually fund a collective good\n// people can send the Ethereum, Polygon, Avalanche,\n//Phantom or other blockchain native token into this contract.\n\n//payable ---- fund function (allows users to send money to the contract)\n//withdraw -----withdraw the funding\n//fund this contract with a certain amount of eth or wei\n\n//we can send money into our deployed contract\n//the person who deployed this contract can withdraw the funds back out.\n//once the fund was withdrawn, the amount of all the funds is reset back to zero.\n\n//Get funds from users\n//Withdraw funds\n//Set a minimal funding value in USD\n\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\n//constant and immutable keywords\n\n// deploy 971,870 gas fee ----normal\n// deploy 949,404 gas fee --- using constant type\n\nerror NotOwner(); //outside of contract\n\ncontract FundMe {\n    using PriceConverter for uint256;\n    //每个人都能访问，所以是public\n    //payable keyword 会让这个function的button颜色变红，而普通function的颜色是橘色的\n    //绿色的function表示状态state。\n\n    //using the chainlink and oralces\n    //这里是usd\n    uint256 public constant MINIMUM_USD = 50 * 1e18; //global variables\n    // 307 gas fee --using constant variable\n    // 2407 gas fee --- non constant\n\n    address[] public funders; //记录donators\n    mapping(address => uint256) public addressToAmountFunded; //记录每个donators对应的捐赠多少钱\n\n    //不会修改\n    address public immutable i_owner; //谁deploy这个contract,谁就是owner\n\n    //需要去重写constructor中的信息\n    //需要和PriceFeed进行interact\n    AggregatorV3Interface public priceFeed;\n\n    //传递参数\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender; //save gas\n        // 444 gas fee --- immutable\n        // 2580 gas fee --- non-immutable\n        priceFeed = AggregatorV3Interface(priceFeedAddress); //使用传递来的PriceFeedAddress参数作为priceFeed\n    }\n\n    //必须要花钱才能启动该function (payable type)\n    //记录donators and donating currency\n    //people can fund our contract\n    function Fund() public payable {\n        //want to be able to set the minimum fund amount in USD\n        //How do we send Eth to this contract\n        //发送的value必须大于1 ether\n        //If this require is false, this function will be reverted: 如果下面的值为false, 那么剩余的gas fee will be returned\n        //比如这一行require为false，那么上面的代码会正常执行(并且会正常的花费一定数额的gas fee)，但是前面代码的结果不会返回给用户，\n        //但是因为revert, 下面的代码不会执行, 所以会返回剩余的gas fee.\n        //And send the error message.\n        //eth转换成usd\n\n        //msg.value.getConversionRate() 与 getConversionRate(msg.value) 的功能一样，\n        //都是传入msg.value进入PriceConverter.sol的getConversionRate()方法。\n        //只有getConversionRate()需要传参数，其他的两个方法都不需要传参数。\n        //这里的msg.value被library视为getConversionRate()的第一个传入的参数。如果该方法还需要传入多个参数\n        //就在该函数括号内添加除需要传入的第一个参数以外的其他参数。\n\n        //现在PriceFeed作为另一个参数传入到getConversionRate()\n        require(\n            msg.value.getConversionRate(priceFeed) > MINIMUM_USD,\n            \"Didn't send enough\"\n        ); // 1 ether = 1*10**18 = 1000000000000000000 wei\n        funders.push(msg.sender); //跟踪哪些用户pay了这个function\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    //withdraw the funds out of contracts, use the funds to buy something for this project\n    //withdraw all the funds: addressToAmountFunded are rested to zero.\n    //onlyOwner: 为modifier, 先执行onlyOwner中的语句，再运行该函数中的语句\n    function Withdraw() public onlyOwner {\n        //只有owner才能开启这个方法\n        //require(msg.sender == owner, \"only the owner can operate this function\");\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funders_address = funders[i];\n            addressToAmountFunded[funders_address] = 0; //所有funder的钱都设置为0\n        }\n        //reset the array\n        //重新定义了一个funders数组来存储funders的address，来替代原来的funders\n        funders = new address[](0);\n        //actually withdraw the funds from contract (把contract的资金都返回给投资人)\n\n        //transfer (simple one)\n        //msg.sender = address\n        //payable(msg.sender) = payable address\n        //需要进行type转换\n        //payable(msg.sender).transfer(address(this).balance);  //获得该sender所捐赠的金额\n\n        //send\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);  //获得该sender所捐赠的金额\n        //require(sendSuccess,\"send fail\");\n\n        //call --- low level command\n        //call括号中的“”可以输入information of function\n        //需要像map一样通过key:value的形式来获取该sender发送的金额，并且call value会返回两个参数\n        //这里返回的两个参数分别是 (bool callSuccess, bytes memory datareturns)\n        //datareturns是array, 所以需要memory keyword\n        //这里不需要datareturns, 所以删除\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"call fail\");\n    }\n\n    modifier onlyOwner() {\n        //require(msg.sender == i_owner, NotOwner());\n        if (msg.sender != i_owner) {\n            revert NotOwner(); //直接用error call来进行revert操作\n        } // saving a lot gas\n        _; // the reset of the code inside of the function.\n    }\n\n    receive() external payable {\n        Fund(); //不小心发送了ETH但是没有点击Fund()function\n    }\n\n    fallback() external payable {\n        Fund(); //输入一些无法解析的CALLDATA会调用fallback\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n//all the function in the library are gonna be internal keywords\n//不能声明state variable 以及 发送ether\nlibrary PriceConverter {\n    // need to get the Chainlink price feeds.\n    // to get the contract outside of our project, we need two things:\n    // 1. ABI, 2. contract address\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        //可以通过contract的interface来获得对应的ABI\n        //然后通过 interface(contract address).function()来获得对应contract里的功能。\n        //ABI\n        //Address: 0x694AA1769357215DE4FAC081bf1f309aDC325306 ---Speoli testnet\n        //返回值不止一个参数\n        //https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\n\n        //这部分不再需要，因为现在priceFeed已经作为参数来进行调用，而非使用硬编码的形式写入到合约里\n        // AggregatorV3Interface PriceFeed = AggregatorV3Interface(\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\n        // );\n        //(uint80 roundId, int256 answer, uint256 startAt, uint256 updatedAt, uint80 answeredInRound)\n        //只需要这一个变量\n        //int256\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        //Eth in terms of USD\n        //8 decimals in priceFeed\n        //这里的priceFeed需要和上面的Fund()的msg.value相match\n        //msg.value为uint256, 所以这里需要类型转换\n        //这里的answer为8位，而eth的位数为18位，所以需要再乘以1e10\n        return uint256(answer * 1e10); //1e10 = 1*10000000000\n    }\n\n    //ether转成dollars\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed); //1eth为多少美元的价格\n        //如果不除以1e18，就会有36位\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd; //返回的decimal为18位\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}